int main(int argc, char** argv)
{
int p = 10;
	int n = 200;
	long double * zk = new long double[n];
	long double * xFull = new long double[n];
	long double * a = new long double[n * n];
	long double * b = new long double[n];

	long double epsilon = 0.000001;
	long double tau = 0.00001;

	long double globalSum = 0;
	long double norm = 10*epsilon;
	
		
	//initialization
#pragma omp parallel for num_threads(p)
	for(int i = 0; i<n; i++)
	{
		b[i] = n + 1;
		xFull[i]=0;
		for(int j = 0; j<n; j++)
			a[i*n+j] = (i==j)?2:1;
	}
	
/*
			for(int i = 0; i<n; i++)
			{
				for(int j = 0; j<n; j++)
					std::cerr << a[i*n+j] << "\t";
				std::cerr << "\n";
			}
		

	*/
	int iter = 0;


    double t1 = omp_get_wtime();
	while( iter < 5000)
	{

		iter++;
		globalSum =0;
#pragma omp parallel for num_threads(p)
		for(int i = 0; i<n; i++)
		{
			
			//zk = Ax
			zk[i]=0;

			for(int j = 0; j<n; j++)
			{
				zk[i] += a[i*n+j]*xFull[j];
			}
			//zk = zk - b
			zk[i] -= b[i];


			//x_{k+1} = xk-tau*zk
			xFull[i] = xFull[i] - tau*zk[i];
		}
#pragma omp parallel for num_threads(p) reduction(+:globalSum)
		for(int i = 0; i<n; i++)
		{
			
			globalSum += zk[i]*zk[i];
		}
		norm = sqrt(globalSum)/((n+1)*(n+1)*n);
#pragma omp barrier
	}
std::cerr<<iter<<" ";

    double t2 = omp_get_wtime();

		/*r(int i = 0; i<n; i++)
		{
		std::cerr<< xFull[i]<<"\n";

			
		}*/

std::cerr<<"Time is:"<<t2-t1<<"\n";
	
	delete[] zk;
	delete[] xFull;
	delete[] a;
	delete[] b;
	return 0;
}


#include <omp.h>
#include <iostream>
#include <cmath>

int main(int argc, char** argv)
{
int p = 10;
	int n = 5000;
	long double * zk = new long double[n];
	long double * xFull = new long double[n];
	long double * a = new long double[n * n];
	long double * b = new long double[n];

	long double epsilon = 0.00001;
	long double tau = 0.0001;

	long double globalSum = 0;
	long double norm = 10*epsilon;
	
		
	//initialization
#pragma omp parallel for num_threads(p)
	for(int i = 0; i<n; i++)
	{
		b[i] = n + 1;
		xFull[i]=0;
		for(int j = 0; j<n; j++)
			a[i*n+j] = (i==j)?2:1;
	}
	
/*
			for(int i = 0; i<n; i++)
			{
				for(int j = 0; j<n; j++)
					std::cerr << a[i*n+j] << "\t";
				std::cerr << "\n";
			}
		

	*/
	int iter = 0;
int i =0;

    double t1 = omp_get_wtime();
#pragma omp parallel num_threads(p) private (i)
{
	while( iter < 5000)
	{

          #pragma omp single
            globalSum= 0;
            #pragma omp atomic
		iter++;

		

#pragma omp for
 		for(i = 0; i < n; i++){
                	zk[i] = 0;
            	}
#pragma omp for
		for(i = 0; i<n; i++)
		{


			//zk = Ax
			

			for(int j = 0; j<n; j++)
			{
				zk[i] += a[i*n+j]*xFull[j];
			}

			//zk = zk - b
			zk[i] -= b[i];


			//x_{k+1} = xk-tau*zk
			xFull[i] = xFull[i] - tau*zk[i];
		}
#pragma omp for
		for(i = 0; i<n; i++)
		{
#pragma omp atomic		
			globalSum += zk[i]*zk[i];
		}

          #pragma omp single
		norm = sqrt(globalSum)/((n+1)*(n+1)*n);
	}
}

    double t2 = omp_get_wtime();

		for(int i = 0; i<n; i++)
		{
		std::cerr<< xFull[i]<<"\n";

			
		}

std::cerr<<"Time is:"<<t2-t1<<"\n";
	
	delete[] zk;
	delete[] xFull;
	delete[] a;
	delete[] b;
	return 0;
}

#include <math.h>
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int n = 100;
int iter = 15000;
double t = 1e-2;
double eps = 1e-5;

void init(double * a, double * b, double * x) {
    int i, j;
    #pragma omp parallel for private(i, j)
    for (i = 0; i < n; ++i) {
        for (j = 0; j < n; ++j) {
            a[i * n + j] = (i == j) ? 2.0 : 1.0;
        }
        b[i] = 1.0 + n;
        x[i] = 0;
    }
}

double get_norm(double * data, int size) {
    double norm = 0.0;
    int i;
    for (i = 0; i < size; ++i) {
        norm += data[i] * data[i];    
    }
    return norm;
}

int main(int argc, char ** argv) {
    omp_set_num_threads(2);

    double * a = (double *)malloc(n * n * sizeof(double));
    double * b = (double *)malloc(n * sizeof(double));
    double * x = (double *)malloc(n * sizeof(double));
    double * temp = (double *)malloc(n * sizeof(double));   
  
    init(a, b, x);

    double norm_b = get_norm(b, n);
    double cur_eps = 10.0 * eps;

    clock_t now = clock();

    //while (eps * eps <= cur_eps) {   
    int it;
    for (it = 0; it < iter; ++it) {
        int i;
        #pragma omp parallel for private(i)
        for (i = 0; i < n; ++i) {
            temp[i] = 0;
        }

        
        //temp = Ax
        #pragma omp parallel for private(i)
        for (i = 0; i < n; ++i) {
            int k;
            for (k = 0; k < n; ++k) {
                temp[i] += a[i * n + k] * x[k];  
            }
        }

        //temp = Ax - b
        #pragma omp parallel for private(i)
        for (i = 0; i < n; ++i) {
            temp[i] -= b[i];
        }

        for (i = 0; i < n; ++i) {
            double r = t * temp[i];
            #pragma omp atomic
            x[i] -= r;
        }
         
        double norm = get_norm(temp, n);
        cur_eps = norm / norm_b;
    }
    //int i;
    //for (i = 0; i < n; ++i) {
    //    printf("%lf ", x[i]);
    //}
    //printf("\n");
    printf("Time %lf sec.\n", (double)(clock() - now) / CLOCKS_PER_SEC);
    return 0;
}





#include <omp.h>
  #include <iostream>
  #include <cmath>
  #define t 2
  #define N 8
  
  int main(int argc, char **argv){
      omp_set_num_threads(t);
      double tau = 0.01;
      double eps = 0.00001;
      double norma = 0;
      double normaC;
      double normaB = sqrt(N * (N + 1));
      double globalSum = 0;
      double *A = new double[N*N];
      double *x = new double[N];
      double *b = new double[N];
  
      #pragma omp parallel for 
      for (size_t i = 0; i < N; ++i){
          for(size_t j = 0; j < N; ++j){
              A[i * N + j] = (i == j) ? 2.0 : 1.0;
          }
          b[i] = N + 1;
      }
  
      double *tmp = new double[N];
  
      double time_s = omp_get_wtime();
      do{
          globalSum = 0;
         #pragma omp parallel for
         for(size_t i = 0; i < N; ++i) {
              tmp[i] = 0;
              for(size_t j = 0; j < N; ++j){
                  tmp[i] += A[i * N + j] * x[j];
              }
              tmp[i] -= b[i];
              x[i] -= tmp[i] * tau;
         }
         #pragma omp parallel for reduction(+:globalSum)
         for(size_t i = 0; i < N; ++i) {
              globalSum += tmp[i]*tmp[i];
         }
         norma = sqrt(globalSum)/normaB;
      #pragma omp barrier
      } while(eps<norma);
  
      double time_e = omp_get_wtime();
  
      std::cout << time_e - time_s << std::endl;
      for(size_t i = 0; i < N; ++i) {
          std::cout << x[i] << " ";
  	}  
     delete [] tmp;
     delete [] b;
     delete [] x;
     delete [] A;
}



nsulab@xeon:~/13206/nechakhin$ cat omp.cpp
#include <omp.h>
#include <iostream>
#include <time.h>
#include <cmath>

int main(int argc, char** argv)
{
	int n = 500;

    omp_set_num_threads(4);

			double* zk = new double[n];
			double* xFull = new double[n];
			double* a = new double[n * n];
			double* b = new double[n];

			double epsilon = 0.0001;
			double tau = 0.0001;

			double sum = 0;
			double norm = 10 * epsilon;

			//initialization
#pragma omp parallel for
			for (int i = 0; i < n; ++i)
			{
				xFull[i] = 0;
				zk[i] = i;
				b[i] = n + 1;
				for (int j = 0; j < n; ++j)
					a[i*n + j] = (i == j) ? 2 : 1;
			}

			clock_t t = 0;
			t = clock();
			int iter = 0;
			// #pragma omp parallel - second variant
			while (norm > epsilon && iter < 5000)
			{
				iter++;
#pragma omp parallel for
				for (int i = 0; i < n; ++i)
				{
					//zk = Ax
					for (int j = 0; j < n; ++j)
					{
						zk[i] += a[i*n + j] * xFull[j];
					}
					//zk = zk - b
					zk[i] -= b[i];
					//x_{k+1} = xk-tau*zk
					xFull[i] = xFull[i] - tau * zk[i];
				}
#pragma omp parallel for reduction(+:sum)
				for (int i = 0; i < n; ++i)
				{
					sum += zk[i] * zk[i];
				}

				norm = sqrt(sum);
			}

			t = clock() - t;
			std::cerr << n << " " << (float)t / CLOCKS_PER_SEC << '\n';

			delete[] zk;
			delete[] xFull;
			delete[] a;
			delete[] b;
	return 0;
}
